/**
 * @generated VGen (for ANTLR) 1.7.4
 */


// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendría un visitor que compila y
que al ejecutarlo recorrería todo el árbol (sin hacer nada aún en él).
Solo quedaría añadir a cada método visit aquello adicional que se quiera realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede
	// borrar (dicho método se heredaría de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera, cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST
    //      (dejando que el padre se encargue del recorrido de los hijos).
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso, ya se tiene implementado
	//		dicho recorrido y solo habría que incrustar las acciones adicionales en el mismo. En este caso,
	//		es la llamada a 'super.visit' la que debería ser borrada.
	// ---------------------------------------------------------

	//	class Program { ClassNode classnode;  MethodCallSentence methodcallsentence; }
	public Object visit(Program program, Object param) {

		// super.visit(node, param);

		if (program.getClassnode() != null)
			program.getClassnode().accept(this, param);

		if (program.getMethodcallsentence() != null)
			program.getMethodcallsentence().accept(this, param);

		return null;
	}

	//	class ClassNode { String name;  List<Definition> definition;  List<String> createMethod;  List<Method> method; }
	public Object visit(ClassNode classNode, Object param) {

		// super.visit(node, param);

		if (classNode.getDefinition() != null)
			for (Definition child : classNode.getDefinition())
				child.accept(this, param);

		if (classNode.getMethod() != null)
			for (Method child : classNode.getMethod())
				child.accept(this, param);

		return null;
	}

	//	class Method { String name;  List<Parameter> parameter;  Type retorno;  List<Definition> definition;  List<Sentence> sentence; }
	public Object visit(Method method, Object param) {

		// super.visit(node, param);

		if (method.getParameter() != null)
			for (Parameter child : method.getParameter())
				child.accept(this, param);

		if (method.getRetorno() != null)
			method.getRetorno().accept(this, param);

		if (method.getDefinition() != null)
			for (Definition child : method.getDefinition())
				child.accept(this, param);

		if (method.getSentence() != null)
			for (Sentence child : method.getSentence())
				child.accept(this, param);

		return null;
	}

	//	class Parameter { String name;  Type type; }
	public Object visit(Parameter parameter, Object param) {

		// super.visit(node, param);

		if (parameter.getType() != null)
			parameter.getType().accept(this, param);

		return null;
	}

	//	class Print { String string;  List<Expr> expr; }
	public Object visit(Print print, Object param) {

		// super.visit(node, param);

		if (print.getExpr() != null)
			for (Expr child : print.getExpr())
				child.accept(this, param);

		return null;
	}

	//	class Read { List<Expr> expr; }
	public Object visit(Read read, Object param) {

		// super.visit(node, param);

		if (read.getExpr() != null)
			for (Expr child : read.getExpr())
				child.accept(this, param);

		return null;
	}

	//	class Assignment { Expr left;  Expr right; }
	public Object visit(Assignment assignment, Object param) {

		// super.visit(node, param);

		if (assignment.getLeft() != null)
			assignment.getLeft().accept(this, param);

		if (assignment.getRight() != null)
			assignment.getRight().accept(this, param);

		return null;
	}

	//	class Conditional { Expr condition;  List<Sentence> iftrue;  List<Sentence> iffalse; }
	public Object visit(Conditional conditional, Object param) {

		// super.visit(node, param);

		if (conditional.getCondition() != null)
			conditional.getCondition().accept(this, param);

		if (conditional.getIftrue() != null)
			for (Sentence child : conditional.getIftrue())
				child.accept(this, param);

		if (conditional.getIffalse() != null)
			for (Sentence child : conditional.getIffalse())
				child.accept(this, param);

		return null;
	}

	//	class Loop { List<Sentence> init;  Expr condition;  List<Sentence> sentence; }
	public Object visit(Loop loop, Object param) {

		// super.visit(node, param);

		if (loop.getInit() != null)
			for (Sentence child : loop.getInit())
				child.accept(this, param);

		if (loop.getCondition() != null)
			loop.getCondition().accept(this, param);

		if (loop.getSentence() != null)
			for (Sentence child : loop.getSentence())
				child.accept(this, param);

		return null;
	}

	//	class ReturnNode { Expr expr; }
	public Object visit(ReturnNode returnNode, Object param) {

		// super.visit(node, param);

		if (returnNode.getExpr() != null)
			returnNode.getExpr().accept(this, param);

		return null;
	}

	//	class MethodCallSentence { String name;  List<Expr> args; }
	public Object visit(MethodCallSentence methodCallSentence, Object param) {

		// super.visit(node, param);

		if (methodCallSentence.getArgs() != null)
			for (Expr child : methodCallSentence.getArgs())
				child.accept(this, param);

		return null;
	}

	//	class SwitchSentence { Expr valor;  List<CaseOption> caseoption;  DefaultCase defaultcase; }
	public Object visit(SwitchSentence switchSentence, Object param) {

		// super.visit(node, param);

		if (switchSentence.getValor() != null)
			switchSentence.getValor().accept(this, param);

		if (switchSentence.getCaseoption() != null)
			for (CaseOption child : switchSentence.getCaseoption())
				child.accept(this, param);

		if (switchSentence.getDefaultcase() != null)
			switchSentence.getDefaultcase().accept(this, param);

		return null;
	}

	//	class BreakSentence {  }
	public Object visit(BreakSentence breakSentence, Object param) {
		return null;
	}

	//	class CaseOption { Expr valor;  List<Sentence> sentence; }
	public Object visit(CaseOption caseOption, Object param) {

		// super.visit(node, param);

		if (caseOption.getValor() != null)
			caseOption.getValor().accept(this, param);

		if (caseOption.getSentence() != null)
			for (Sentence child : caseOption.getSentence())
				child.accept(this, param);

		return null;
	}

	//	class DefaultCase { List<Sentence> sentence; }
	public Object visit(DefaultCase defaultCase, Object param) {

		// super.visit(node, param);

		if (defaultCase.getSentence() != null)
			for (Sentence child : defaultCase.getSentence())
				child.accept(this, param);

		return null;
	}

	//	class ExprBinariaAritmetica { Expr left;  String op;  Expr right; }
	public Object visit(ExprBinariaAritmetica exprBinariaAritmetica, Object param) {

		// super.visit(node, param);

		if (exprBinariaAritmetica.getLeft() != null)
			exprBinariaAritmetica.getLeft().accept(this, param);

		if (exprBinariaAritmetica.getRight() != null)
			exprBinariaAritmetica.getRight().accept(this, param);

		return null;
	}

	//	class ExprUnariaAritmetica { String op;  Expr expr; }
	public Object visit(ExprUnariaAritmetica exprUnariaAritmetica, Object param) {

		// super.visit(node, param);

		if (exprUnariaAritmetica.getExpr() != null)
			exprUnariaAritmetica.getExpr().accept(this, param);

		return null;
	}

	//	class ExprBinariaLogica { Expr left;  String op;  Expr right; }
	public Object visit(ExprBinariaLogica exprBinariaLogica, Object param) {

		// super.visit(node, param);

		if (exprBinariaLogica.getLeft() != null)
			exprBinariaLogica.getLeft().accept(this, param);

		if (exprBinariaLogica.getRight() != null)
			exprBinariaLogica.getRight().accept(this, param);

		return null;
	}

	//	class ExprUnariaLogica { String op;  Expr expr; }
	public Object visit(ExprUnariaLogica exprUnariaLogica, Object param) {

		// super.visit(node, param);

		if (exprUnariaLogica.getExpr() != null)
			exprUnariaLogica.getExpr().accept(this, param);

		return null;
	}

	//	class Acces { Expr left;  String op;  String right; }
	public Object visit(Acces acces, Object param) {

		// super.visit(node, param);

		if (acces.getLeft() != null)
			acces.getLeft().accept(this, param);

		return null;
	}

	//	class ArrayAcces { Expr left;  Expr right; }
	public Object visit(ArrayAcces arrayAcces, Object param) {

		// super.visit(node, param);

		if (arrayAcces.getLeft() != null)
			arrayAcces.getLeft().accept(this, param);

		if (arrayAcces.getRight() != null)
			arrayAcces.getRight().accept(this, param);

		return null;
	}

	//	class Cast { Type typeToConvert;  Expr expr; }
	public Object visit(Cast cast, Object param) {

		// super.visit(node, param);

		if (cast.getTypeToConvert() != null)
			cast.getTypeToConvert().accept(this, param);

		if (cast.getExpr() != null)
			cast.getExpr().accept(this, param);

		return null;
	}

	//	class LitEnt { String string; }
	public Object visit(LitEnt litEnt, Object param) {
		return null;
	}

	//	class LitReal { String string; }
	public Object visit(LitReal litReal, Object param) {
		return null;
	}

	//	class LitChar { String string; }
	public Object visit(LitChar litChar, Object param) {
		return null;
	}

	//	class Variable { String string; }
	public Object visit(Variable variable, Object param) {
		return null;
	}

	//	class MethodCallExpr { String name;  List<Expr> args; }
	public Object visit(MethodCallExpr methodCallExpr, Object param) {

		// super.visit(node, param);

		if (methodCallExpr.getArgs() != null)
			for (Expr child : methodCallExpr.getArgs())
				child.accept(this, param);

		return null;
	}

	//	class IntType {  }
	public Object visit(IntType intType, Object param) {
		return null;
	}

	//	class RealType {  }
	public Object visit(RealType realType, Object param) {
		return null;
	}

	//	class CharType {  }
	public Object visit(CharType charType, Object param) {
		return null;
	}

	//	class ArrayType { int index;  Type type; }
	public Object visit(ArrayType arrayType, Object param) {

		// super.visit(node, param);

		if (arrayType.getType() != null)
			arrayType.getType().accept(this, param);

		return null;
	}

	//	class VoidType {  }
	public Object visit(VoidType voidType, Object param) {
		return null;
	}

	//	class StructType { String name; }
	public Object visit(StructType structType, Object param) {
		return null;
	}

	//	class TupleDefinition { String name;  List<VarDefinition> vardefinition; }
	public Object visit(TupleDefinition tupleDefinition, Object param) {

		// super.visit(node, param);

		if (tupleDefinition.getVardefinition() != null)
			for (VarDefinition child : tupleDefinition.getVardefinition())
				child.accept(this, param);

		return null;
	}

	//	class VarDefinition { List<String> name;  Type type; }
	public Object visit(VarDefinition varDefinition, Object param) {

		// super.visit(node, param);

		if (varDefinition.getType() != null)
			varDefinition.getType().accept(this, param);

		return null;
	}
}
