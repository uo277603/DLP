CATEGORIES
expr, sentence, type, definition

NODES
program -> classNode methodCallSentence;
classNode -> name:string definition* createMethod:string* method*;
method -> name:string parameter* retorno:type definition* sentence* ;

parameter -> name:string type ;

print:sentence -> string expr* ;
read:sentence -> expr*;
assignment:sentence -> left:expr right:expr;
conditional:sentence -> condition:expr iftrue:sentence* iffalse:sentence*;
loop:sentence -> init:sentence* condition:expr sentence*;
forSentence:sentence -> init:sentence condition:expr increment:sentence sentence*;
returnNode:sentence -> expr;
methodCallSentence:sentence -> name:string args:expr* ;

exprBinariaAritmetica:expr -> left:expr op:string right:expr ;
exprUnariaAritmetica:expr -> op:string expr ;
exprBinariaLogica:expr -> left:expr op:string right:expr ;
exprUnariaLogica:expr -> op:string expr ;
acces:expr -> left:expr op:string right:string ;
arrayAcces:expr -> left:expr right:expr ;
cast:expr -> typeToConvert:type expr ;
litEnt:expr -> string ;
litReal:expr -> string ;
litChar:expr -> string ;
variable:expr -> string ;
methodCallExpr:expr -> name:string args:expr* ;

intType:type -> ;
realType:type -> ;
charType:type -> ;
arrayType:type -> index:int type;
voidType:type -> ;
structType:type -> name:string;

tupleDefinition:definition -> name:string varDefinition* ;
varDefinition:definition -> name:string* type ;


